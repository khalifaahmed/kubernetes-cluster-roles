---
- name: making some alias
  ansible.builtin.blockinfile:
    path: /etc/bash.bashrc
    block: |
      alias c=clear
      alias k=kubectl
      alias la='ls -lahF'

- name: Set a hostname
  ansible.builtin.hostname:
    name: master

- name: Install a kubernetes prerequists packages
  ansible.builtin.apt:
    update_cache: true
    pkg:
    - apt-transport-https
    - ca-certificates
    - curl
    - gpg
    - containerd
    - nginx

- name: disable swap
  ansible.builtin.command:
    cmd:  swapoff -a

- name: configure k8s prerequist modules
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "{{ item }}"
    create: yes      
  loop: 
  - overlay
  - br_netfilter
  register: k8s_prerequists_state

# - name: configurer k8s prerequists
#   ansible.builtin.blockinfile:
#     path: /etc/modules-load.d/k8s.conf
#     block: |
#       overlay
#       br_netfilter
#     create: true
# - name: removing ansible marker from /etc/modules-load.d/k8s.conf
#   ansible.builtin.lineinfile:
#     path: /etc/modules-load.d/k8s.conf
#     state: absent
#     regexp: 'ANSIBLE'

- name: k8s prerequists commands
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
  - sudo modprobe overlay
  - sudo modprobe br_netfilter  
  when: k8s_prerequists_state.changed == true
      
- name: configure file /etc/sysctl.d/k8s.conf
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: "{{ item }}"
    create: yes      
  loop: 
  - net.bridge.bridge-nf-call-iptables  = 1
  - net.bridge.bridge-nf-call-ip6tables = 1
  - net.ipv4.ip_forward                 = 1
  register: sysctl_file_state
  notify:
  - reload sysctl

- meta: flush_handlers

- name: configure containerd
  block:
    - name: start & enable containerd.service
      systemd:
        name: containerd
        state: started
        enabled: true

    - name: copy containerd config defaults into a register
      ansible.builtin.command:
        cmd: containerd config default
      register: containerd_config_cmd   #cmd_result

    - name: configure file /etc/containerd/config.toml
      ansible.builtin.blockinfile:
        path: /etc/containerd/config.toml
        block: |
          {{ containerd_config_cmd.stdout }}
        create: true

    - name: removing ansible marker from /etc/containerd/config.toml
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        state: absent
        regexp: 'ANSIBLE'

    - name: configure Cgroup in containerd config file
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^            SystemdCgroup = '
        line: '            SystemdCgroup = true'

    - name: restart containerd
      systemd:
        name: containerd
        state: restarted

  when: k8s_prerequists_state.changed == true

# - name: Check if file /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
#   stat:
#     path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#   register: stat_result
# - debug:
#     var: stat_result.stat.exists
# ############### "command" module has no redirection but the "shell" module contain redirectoin man ##################################
# - name: Add k8s key
#   ansible.builtin.shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#   when: not stat_result.stat.exists
# # - name: add k8s repo
# #   ansible.builtin.command:
# #     cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
# - name: configure file /etc/apt/sources.list.d/kubernetes.list
#   ansible.builtin.blockinfile:
#     path: /etc/apt/sources.list.d/kubernetes.list
#     block: |
#       deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
#     create: true


- name: Add Kubernetes apt key.
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key    
    state: present
  register: add_repository_key

- name: Add Kubernetes repository.
  apt_repository:
    repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    state: present
    update_cache: true

- name: Check if file /etc/kubernetes/admin.conf exists
  stat:
    path: /etc/kubernetes/admin.conf 
  register: kube_init_stat
- debug:
    var: kube_init_stat.stat.exists

- name: Install kubeadm
  ansible.builtin.apt:
    # update_cache: yes
    pkg:
      - kubelet=1.28.2-1.1
      - kubeadm=1.28.2-1.1
      - kubectl=1.28.2-1.1
    allow_downgrade: true
  when: not kube_init_stat.stat.exists  

- name: kubeadm init
  become: yes
  become_user: root
  ansible.builtin.command: 
    cmd: kubeadm init    #--apiserver-advertise-address=${master_public_ip}
  when: not kube_init_stat.stat.exists    

- name: Create /home/ubuntu/.kube directory if it does not exist
  ansible.builtin.file:
    path: /home/ubuntu/.kube
    state: directory
- name: Copy kubeconfig file 
  become: yes
  become_user: root
  copy:
    src: /etc/kubernetes/admin.conf 
    dest: /home/ubuntu/.kube/config
    remote_src: true
- name: change ownership of kubeconfig file
  ansible.builtin.file:      
    path: /home/ubuntu/.kube/config
    state: file
    owner: ubuntu
    group: ubuntu         
    mode: "0600"   
- name: generate token for worker nodes to join
  ansible.builtin.command: 
    cmd: kubeadm token create --print-join-command
  register: kubeadm_command_output
- name: output the register variable value by hosts
  debug:
    var:  hostvars['${master_public_ip}']['kubeadm_command_output']['stdout']
- name: deploy weave cni
  become: yes
  become_user: ubuntu
  ansible.builtin.command: 
    cmd: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
  changed_when: false

- name: start & enable nginx.service
  systemd:
    name: nginx
    state: started
    enabled: true

- name: configure reverse proxy by nginx
  ansible.builtin.blockinfile:
    path: /etc/nginx/nginx.conf
    block: |
      stream {
        server {
          listen 0.0.0.0:51555;
          #TCP traffic will be forwarded to the specified server
          proxy_pass ${master_private_ip}:6443;
        }
      }

- name: Reload service nginx
  ansible.builtin.systemd:
    name: nginx
    state: restarted



# - name: Add an helm Apt signing key to a specific keyring file
#   ansible.builtin.apt_key:
#     url: https://baltocdn.com/helm/signing.asc  
#     keyring: /usr/share/keyrings/helm.gpg

# - name: Add helm repository.
#   apt_repository:
#     repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
#     state: present
#     update_cache: true

# - name: Add helm key && repo
#   block:
#     - name: Add helm key
#       ansible.builtin.get_url:
#         url: https://baltocdn.com/helm/signing.asc
#         dest: /usr/share/keyrings/helm.gpg

#     - name: Add helm repo
#       ansible.builtin.apt_repository:
#         repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
#         state: present
#         update_cache: true

- name: Add Helm apt key.
  apt_key:
    url: https://baltocdn.com/helm/signing.asc   
    state: present
  register: add_helm_repository_key

- name: Add helm repository.
  apt_repository:
    repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
    state: present
    update_cache: true

- name: Install helm
  ansible.builtin.apt:
    pkg:
    - helm
  register: helm_install_stat

- name: Deploy ingress-nginx repo 
  become: yes
  become_user: ubuntu    
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
  - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  - helm repo update  
  when:
  - helm_install_stat.changed == true
