---
- debug:
    msg:
      - "ansible_facts.all_ipv4_addresses            = {{ansible_facts.all_ipv4_addresses}}"
      - "ansible_facts.locally_reachable_ips.ipv4[0] = {{ansible_facts.locally_reachable_ips.ipv4[0]}}"
      - "ansible_facts.default_ipv4.address          = {{ansible_facts.default_ipv4.address}}"
#      - "{{ansible_facts.ipv4}}"
#      - "{{ansible_facts}}"

  - name: making some alias
    ansible.builtin.blockinfile:
      path: /etc/bashrc
      block: |
        alias c=clear
        alias k=kubectl
        alias la='ls -lahF'
        source <(kubectl completion bash)

  - name: Set a hostname
    ansible.builtin.hostname:
      name: master

  - name: ADD repo
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo

  - name: ADD k8s repo
    ansible.builtin.blockinfile:
      path: /etc/yum.repos.d/kubernetes.repo
      block: |
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
        exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

  - name: Install a kubernetes prerequists packages
    ansible.builtin.apt:
      update_cache: true
      yum:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
      - containerd.io
      - nginx

  - name: disable swap
    ansible.builtin.command:
      cmd:  swapoff -a

  - name: configure k8s prerequist modules
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      line: "{{ item }}"
      create: yes
    loop:
    - overlay
    - br_netfilter
    register: k8s_prerequists_state

  - name: k8s prerequists commands
    ansible.builtin.command:
      cmd: "{{ item }}"
    loop:
    - sudo modprobe overlay
    - sudo modprobe br_netfilter
    when: k8s_prerequists_state.changed == true

  - name: configure file /etc/sysctl.d/k8s.conf
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      line: "{{ item }}"
      create: yes
    loop:
    - net.bridge.bridge-nf-call-iptables  = 1
    - net.bridge.bridge-nf-call-ip6tables = 1
    - net.ipv4.ip_forward                 = 1
    register: sysctl_file_state
    notify:
    - reload sysctl

  - meta: flush_handlers

  - name: configure containerd
    block:
      - name: start & enable containerd.service
        systemd:
          name: containerd
          state: started
          enabled: true

      - name: copy containerd config defaults into a register
        ansible.builtin.command:
          cmd: containerd config default
        register: containerd_config_cmd   #cmd_result

      - name: configure file /etc/containerd/config.toml
        ansible.builtin.blockinfile:
          path: /etc/containerd/config.toml
          block: |
            {{ containerd_config_cmd.stdout }}
          create: true

      - name: removing ansible marker from /etc/containerd/config.toml
        ansible.builtin.lineinfile:
          path: /etc/containerd/config.toml
          state: absent
          regexp: 'ANSIBLE'

      - name: configure Cgroup in containerd config file
        lineinfile:
          path: /etc/containerd/config.toml
          regexp: '^            SystemdCgroup = '
          line: '            SystemdCgroup = true'

      - name: restart containerd
        systemd:
          name: containerd
          state: restarted

    when: k8s_prerequists_state.changed == true




#- name: Add Kubernetes apt key
#  apt_key:
#    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
#    state: present
#  register: add_repository_key
#
#- name: Add Kubernetes repository
#  apt_repository:
#    repo: "deb https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
#    state: present
#    update_cache: true

- name: Check if file /etc/kubernetes/admin.conf exists
  stat: path=/etc/kubernetes/admin.conf
  register: kube_init_stat

- debug: var=kube_init_stat.stat.exists

- name: Install kubeadm
  ansible.builtin.apt:
    pkg:
      - kubelet=1.29.0-1.1
      - kubeadm=1.29.0-1.1
      - kubectl=1.29.0-1.1
    allow_downgrade: true
  when: not kube_init_stat.stat.exists  

- name: kubeadm init --apiserver-advertise-address=0.0.0.0
  become: yes
  become_user: root
  ansible.builtin.command: 
    cmd: kubeadm init  --apiserver-advertise-address=0.0.0.0
  when: not kube_init_stat.stat.exists    

- name: configure kubeconfig for user ubuntu
  block:
    - name: Create /home/ubuntu/.kube directory if it does not exist
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: "0755"

    - name: Copy kubeconfig file
      become: yes
      become_user: root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: true
        owner: ubuntu
        group: ubuntu
        mode: "0600"

  when: not kube_init_stat.stat.exists

- name: create join_command.sh file in local host to join worker nodes
  block:
    - name: create kubeadm join command
      shell: kubeadm token create --print-join-command
      register: kubeadm_command_output
    - debug: var=kubeadm_command_output
    - name: configure file /home/ubuntu/join_command.sh
      ansible.builtin.lineinfile:
        path: /home/ubuntu/join_command.sh
        line: "{{ kubeadm_command_output.stdout }}"
        create: true
    - name: fetch join_command.sh
      ansible.builtin.fetch:
        src: /home/ubuntu/join_command.sh
        dest: /home/ahmed/Desktop/terraform/kubernetes-cluster-roles/kubernetes-2/join_command.sh
        flat: true
        register: fetch_register
    - debug: var=fetch_register
  when: not kube_init_stat.stat.exists

#- name: copy the output to a local file
#  copy:
#    src: /home/ubuntu/join_command.sh
#    dest: join_command.sh
#    mode: 755
#  delegate_to: localhost

- name: deploy weave cni
  become: yes
  become_user: ubuntu
  ansible.builtin.command: 
    cmd: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
  changed_when: false
  when: not kube_init_stat.stat.exists

- name: configure nginx reverse proxy
  block:
    - name: start & enable nginx.service
      systemd:
        name: nginx
        state: started
        enabled: true

    - name: configure reverse proxy by nginx
      ansible.builtin.blockinfile:
        path: /etc/nginx/nginx.conf
        block: |
          stream {
            server {
              listen 0.0.0.0:51555;
              #TCP traffic will be forwarded to the specified server
              proxy_pass 10.0.1.239:6443;
            }
          }
      notify:
        - Reload nginx
  when: not kube_init_stat.stat.exists

# - name: Add an helm Apt signing key to a specific keyring file
#   ansible.builtin.apt_key:
#     url: https://baltocdn.com/helm/signing.asc  
#     keyring: /usr/share/keyrings/helm.gpg

# - name: Add helm repository.
#   apt_repository:
#     repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
#     state: present
#     update_cache: true

# - name: Add helm key && repo
#   block:
#     - name: Add helm key
#       ansible.builtin.get_url:
#         url: https://baltocdn.com/helm/signing.asc
#         dest: /usr/share/keyrings/helm.gpg

#     - name: Add helm repo
#       ansible.builtin.apt_repository:
#         repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
#         state: present
#         update_cache: true

- name: Install helm
  block:
    - name: Add Helm apt key
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present
      register: add_helm_repository_key

    - name: Add helm repository
      apt_repository:
        repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
        state: present
        update_cache: true

    - name: Install helm
      ansible.builtin.apt:
        pkg:
        - helm
      register: helm_install_stat
  when: not kube_init_stat.stat.exists

- name: Deploy ingress-nginx repo 
  become: yes
  become_user: ubuntu    
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
  - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  - helm repo add jetstack https://charts.jetstack.io
  - helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
  - helm repo update  
  when:
  - helm_install_stat.changed == true

- name: create ahmed user in kubernetes
  become: true
  become_user: ubuntu
  block:
    - name: Copy file ../../kube-certs-skel/ to /home/ubuntu/kube-certs/
      ansible.builtin.copy:
        src: /home/ahmed/Desktop/terraform/kubernetes-cluster-roles/kubernetes-2/kube-certs-skel/
        dest: /home/ubuntu/kube-certs/
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: generate kubernetes admin user key & csr
      shell: >
        openssl genrsa -out /home/ubuntu/kube-certs/ahmed.key 2048 ;
        openssl req -new -key /home/ubuntu/kube-certs/ahmed.key -subj "/CN=ahmed" -out /home/ubuntu/kube-certs/ahmed.csr

    - name: base64 csr
      shell: cat /home/ubuntu/kube-certs/ahmed.csr | base64 | tr -d "\n"
      register: ahmed_csr_base64

    - name: edit csr.yaml with csr_base64 csr encoded
      ansible.builtin.lineinfile:
        path: /home/ubuntu/kube-certs/ahmed.csr.yml
        regexp: '^  request: '
        line: "  request: {{ahmed_csr_base64.stdout}}"

    - name: create kubeconfig file for kubernetes admin user
      shell: > 
        kubectl apply -f /home/ubuntu/kube-certs/ahmed.csr.yml ;
        kubectl certificate approve ahmed ;
        kubectl get csr ahmed -o yaml | grep "certificate:" | cut -f2 -d ":" | tr -d " " | base64 --decode > /home/ubuntu/kube-certs/ahmed.crt ; 
        kubectl apply -f /home/ubuntu/kube-certs/ahmed-cr.yml ;
        kubectl apply -f /home/ubuntu/kube-certs/ahmed-crb.yml ;
        cp /home/ubuntu/.kube/config /home/ubuntu/.kube/config.original ;
        kubectl config set-cluster ahmed-cluster --certificate-authority=/etc/kubernetes/pki/ca.crt --server=https://{{ansible_facts.locally_reachable_ips.ipv4[0]}}:6443 ;
        kubectl config set-credentials ahmed --client-certificate=/home/ubuntu/kube-certs/ahmed.crt --client-key=/home/ubuntu/kube-certs/ahmed.key ;
        kubectl config set-context ahmed@ahmed-cluster --cluster=ahmed-cluster --user=ahmed --namespace=default ;
        kubectl config use-context ahmed@ahmed-cluster ;
        mv /home/ubuntu/.kube/config /home/ubuntu/kube-certs/ahmed-kubeconfig ;
        cp /home/ubuntu/.kube/config.original /home/ubuntu/.kube/config

#  when: not kube_init_stat.stat.exists

